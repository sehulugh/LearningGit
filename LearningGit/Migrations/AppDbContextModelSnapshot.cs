// <auto-generated />
using LearningGit;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LearningGit.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.14");

            modelBuilder.Entity("LearningGit.Step", b =>
                {
                    b.Property<int>("StepID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("StepCode")
                        .HasColumnType("TEXT");

                    b.Property<int>("StepOrder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StepText")
                        .HasColumnType("TEXT");

                    b.Property<int>("TitleID")
                        .HasColumnType("INTEGER");

                    b.HasKey("StepID");

                    b.HasIndex("TitleID");

                    b.ToTable("Steps");
                });

            modelBuilder.Entity("LearningGit.Title", b =>
                {
                    b.Property<int>("TitleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("TitleOrder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TitleText")
                        .HasColumnType("TEXT");

                    b.HasKey("TitleID");

                    b.ToTable("Titles");
                });

            modelBuilder.Entity("LearningGit.Step", b =>
                {
                    b.HasOne("LearningGit.Title", "Title")
                        .WithMany("Steps")
                        .HasForeignKey("TitleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
